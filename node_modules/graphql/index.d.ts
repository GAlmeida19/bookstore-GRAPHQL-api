// Minimum TypeScript Version: 2.6

/**
 * GraphQL.js provides a reference implementation for the GraphQL specification
 * but is also a useful utility for operating on GraphQL files and building
 * sophisticated tools.
 *
 * This primary module exports a general purpose function for fulfilling all
 * steps of the GraphQL specification in a single operation, but also includes
 * utilities for every part of the GraphQL specification:
 *
 *   - Parsing the GraphQL language.
 *   - Building a GraphQL type schema.
 *   - Validating a GraphQL request against a type schema.
 *   - Executing a GraphQL request against a type schema.
 *
 * This also includes utility functions for operating on GraphQL types and
 * GraphQL documents to facilitate building tools.
 *
 * You may also import from each sub-directory directly. For example, the
 * following two import statements are equivalent:
 *
 *     import { parse } from 'graphql';
 *     import { parse } from 'graphql/language';
 */

// The GraphQL.js version info.
export { version, versionInfo } from 'graphql/version';

// The primary entry point into fulfilling a GraphQL request.
export { GraphQLArgs, graphql, graphqlSync } from 'graphql/graphql';

// Create and operate on GraphQL type definitions and schema.
export {
    // Constant Deprecation Reason
    DEFAULT_DEPRECATION_REASON, GraphQLBoolean, GraphQLDeprecatedDirective, GraphQLDirective, GraphQLEnumType, GraphQLFloat, GraphQLID, GraphQLIncludeDirective, GraphQLInputObjectType, GraphQLInt, GraphQLInterfaceType, GraphQLList,
    GraphQLNonNull, GraphQLObjectType, GraphQLScalarType,
    // Definitions
    GraphQLSchema, GraphQLSkipDirective, GraphQLSpecifiedByDirective, GraphQLString, GraphQLUnionType,
    // Meta-field definitions.
    SchemaMetaFieldDef,
    // "Enum" of Type Kinds
    TypeKind, TypeMetaFieldDef,
    TypeNameMetaFieldDef, __Directive,
    __DirectiveLocation, __EnumValue, __Field,
    __InputValue, __Schema, __Type, __TypeKind, assertAbstractType, assertCompositeType, assertDirective, assertEnumType,
    assertInputObjectType, assertInputType, assertInterfaceType, assertLeafType, assertListType, assertNamedType, assertNonNullType, assertNullableType, assertObjectType, assertOutputType, assertScalarType,
    // Assertions
    assertSchema, assertType, assertUnionType, assertValidSchema, assertWrappingType, getNamedType,
    // Un-modifiers
    getNullableType,
    // GraphQL Types for introspection.
    introspectionTypes, isAbstractType, isCompositeType, isDirective, isEnumType,
    isInputObjectType, isInputType, isInterfaceType, isIntrospectionType, isLeafType, isListType, isNamedType, isNonNullType, isNullableType, isObjectType, isOutputType, isRequiredArgument,
    isRequiredInputField, isScalarType,
    // Predicates
    isSchema, isSpecifiedDirective, isSpecifiedScalarType, isType, isUnionType, isWrappingType,
    // Built-in Directives defined by the Spec
    specifiedDirectives,
    // Standard GraphQL Scalars
    specifiedScalarTypes,
    // Validate GraphQL schema.
    validateSchema
} from 'graphql/type';

export {
    GraphQLAbstractType, GraphQLArgument,
    GraphQLArgumentConfig,
    GraphQLArgumentExtensions, GraphQLCompositeType, GraphQLDirectiveConfig,
    GraphQLDirectiveExtensions, GraphQLEnumTypeConfig,
    GraphQLEnumTypeExtensions,
    GraphQLEnumValue,
    GraphQLEnumValueConfig, GraphQLEnumValueConfigMap, GraphQLEnumValueExtensions, GraphQLField,
    GraphQLFieldConfig, GraphQLFieldConfigArgumentMap,
    GraphQLFieldConfigMap, GraphQLFieldExtensions, GraphQLFieldMap,
    GraphQLFieldResolver,
    GraphQLInputField,
    GraphQLInputFieldConfig, GraphQLInputFieldConfigMap, GraphQLInputFieldExtensions, GraphQLInputFieldMap,
    GraphQLInputObjectTypeConfig,
    GraphQLInputObjectTypeExtensions, GraphQLInputType, GraphQLInterfaceTypeConfig,
    GraphQLInterfaceTypeExtensions,
    GraphQLIsTypeOfFn, GraphQLLeafType, GraphQLNamedInputType,
    GraphQLNamedOutputType, GraphQLNamedType, GraphQLNullableType, GraphQLObjectTypeConfig,
    GraphQLObjectTypeExtensions, GraphQLOutputType, GraphQLResolveInfo, GraphQLScalarLiteralParser, GraphQLScalarSerializer, GraphQLScalarTypeConfig,
    GraphQLScalarTypeExtensions, GraphQLScalarValueParser, GraphQLSchemaConfig,
    GraphQLSchemaExtensions, GraphQLType, GraphQLTypeResolver,
    GraphQLUnionTypeConfig,
    GraphQLUnionTypeExtensions, GraphQLWrappingType, ResponsePath, Thunk
} from 'graphql/type';

// Parse and operate on GraphQL language source files.
export {
    BREAK, DirectiveLocation, Kind,
    // Lex
    Lexer, Location, Source, Token, TokenKind, getLocation, getVisitFn,
    // Predicates
    isDefinitionNode,
    isExecutableDefinitionNode,
    isSelectionNode, isTypeDefinitionNode, isTypeExtensionNode, isTypeNode,
    isTypeSystemDefinitionNode, isTypeSystemExtensionNode, isValueNode,
    // Parse
    parse, parseType, parseValue,
    // Print
    print,
    // Print source location
    printLocation,
    printSourceLocation,
    // Visit
    visit,
    visitInParallel
} from 'graphql/language';

export {
    ASTKindToNode,
    // AST nodes
    ASTNode,
    // Visitor utilities
    ASTVisitor, ASTVisitorKeyMap, ArgumentNode, BooleanValueNode, DefinitionNode, DirectiveDefinitionNode, DirectiveLocationEnum, DirectiveNode, DocumentNode, EnumTypeDefinitionNode, EnumTypeExtensionNode, EnumValueDefinitionNode, EnumValueNode, ExecutableDefinitionNode, FieldDefinitionNode, FieldNode, FloatValueNode, FragmentDefinitionNode, FragmentSpreadNode,
    InlineFragmentNode, InputObjectTypeDefinitionNode, InputObjectTypeExtensionNode, InputValueDefinitionNode, IntValueNode, InterfaceTypeDefinitionNode, InterfaceTypeExtensionNode, KindEnum, ListTypeNode, ListValueNode,
    // Each kind of AST node
    NameNode, NamedTypeNode, NonNullTypeNode, NullValueNode, ObjectFieldNode, ObjectTypeDefinitionNode, ObjectTypeExtensionNode, ObjectValueNode, OperationDefinitionNode, OperationTypeDefinitionNode, OperationTypeNode, ParseOptions, ScalarTypeDefinitionNode, ScalarTypeExtensionNode, SchemaDefinitionNode, SchemaExtensionNode, SelectionNode, SelectionSetNode, SourceLocation, StringValueNode, TokenKindEnum, TypeDefinitionNode, TypeExtensionNode, TypeNode, TypeSystemDefinitionNode, TypeSystemExtensionNode, UnionTypeDefinitionNode, UnionTypeExtensionNode, ValueNode, VariableDefinitionNode,
    VariableNode, VisitFn, Visitor, VisitorKeyMap
} from 'graphql/language';

// Execute GraphQL queries.
export {
    ExecutionArgs,
    ExecutionResult,
    FormattedExecutionResult, defaultFieldResolver,
    defaultTypeResolver, execute,
    executeSync, getDirectiveValues, responsePathAsArray
} from 'graphql/execution';

export {
    SubscriptionArgs, createSourceEventStream, subscribe
} from 'graphql/subscription';

// Validate GraphQL documents.
export {
    // Individual validation rules.
    ExecutableDefinitionsRule,
    FieldsOnCorrectTypeRule,
    FragmentsOnCompositeTypesRule,
    KnownArgumentNamesRule,
    KnownDirectivesRule,
    KnownFragmentNamesRule,
    KnownTypeNamesRule,
    LoneAnonymousOperationRule,
    // SDL-specific validation rules
    LoneSchemaDefinitionRule,
    // Custom validation rules
    NoDeprecatedCustomRule, NoFragmentCyclesRule, NoSchemaIntrospectionCustomRule, NoUndefinedVariablesRule,
    NoUnusedFragmentsRule,
    NoUnusedVariablesRule,
    OverlappingFieldsCanBeMergedRule,
    PossibleFragmentSpreadsRule, PossibleTypeExtensionsRule, ProvidedRequiredArgumentsRule,
    ScalarLeafsRule,
    SingleFieldSubscriptionsRule,
    UniqueArgumentNamesRule, UniqueDirectiveNamesRule, UniqueDirectivesPerLocationRule, UniqueEnumValueNamesRule,
    UniqueFieldDefinitionNamesRule, UniqueFragmentNamesRule,
    UniqueInputFieldNamesRule,
    UniqueOperationNamesRule, UniqueOperationTypesRule,
    UniqueTypeNamesRule, UniqueVariableNamesRule, ValidationContext, ValidationRule, ValuesOfCorrectTypeRule,
    VariablesAreInputTypesRule,
    VariablesInAllowedPositionRule, recommendedRules,
    // All validation rules in the GraphQL Specification.
    specifiedRules, validate
} from 'graphql/validation';

// Create, format, and print GraphQL errors.
export {
    GraphQLError, GraphQLErrorExtensions, GraphQLFormattedError, formatError, locatedError,
    printError, syntaxError
} from 'graphql/error';

// Utilities for operating on GraphQL type schema and parsed sources.
export {
    // Compares two GraphQLSchemas and detects breaking changes.
    BreakingChangeType,
    DangerousChangeType,
    // A helper to use within recursive-descent visitors which need to be aware of
    // the GraphQL type system.
    TypeInfo,
    // Asserts a string is a valid GraphQL name.
    assertValidName,
    // Create a GraphQL language AST from a JavaScript value.
    astFromValue,
    // Build a GraphQLSchema from a parsed GraphQL Schema language AST.
    buildASTSchema,
    // Build a GraphQLSchema from an introspection result.
    buildClientSchema,
    // Build a GraphQLSchema from a GraphQL schema language document.
    buildSchema,
    // Coerces a JavaScript value to a GraphQL type, or produces errors.
    coerceInputValue,
    // Concatenates multiple AST together.
    concatAST, doTypesOverlap,
    // Extends an existing GraphQLSchema from a parsed GraphQL Schema
    // language AST.
    extendSchema, findBreakingChanges,
    findDangerousChanges,
    // @deprecated: Report all deprecated usage within a GraphQL document.
    findDeprecatedUsages,
    // @deprecated: Get the description from a schema AST node and supports legacy
    // syntax for specifying descriptions - will be removed in v16.
    getDescription,
    // Produce the GraphQL query recommended for a full schema introspection.
    // Accepts optional IntrospectionOptions.
    getIntrospectionQuery,
    // Gets the target Operation from a Document.
    getOperationAST,
    // Gets the Type for the target Operation AST.
    getOperationRootType,
    // Convert a GraphQLSchema to an IntrospectionQuery.
    introspectionFromSchema,
    // Comparators for types
    isEqualType,
    isTypeSubTypeOf,
    // Determine if a string is a valid GraphQL name.
    isValidNameError,
    // Sort a GraphQLSchema.
    lexicographicSortSchema,
    // Prints the built-in introspection schema in the Schema Language
    // format.
    printIntrospectionSchema,
    // Print a GraphQLSchema to GraphQL Schema language.
    printSchema,
    // Print a GraphQLType to GraphQL Schema language.
    printType,
    // Separates an AST into an AST per Operation.
    separateOperations,
    // Strips characters that are not significant to the validity or execution
    // of a GraphQL document.
    stripIgnoredCharacters,
    // Create a GraphQLType from a GraphQL language AST.
    typeFromAST,
    // Create a JavaScript value from a GraphQL language AST with a Type.
    valueFromAST,
    // Create a JavaScript value from a GraphQL language AST without a Type.
    valueFromASTUntyped, visitWithTypeInfo
} from 'graphql/utilities';

export {
    BreakingChange, BuildSchemaOptions, DangerousChange, IntrospectionDirective, IntrospectionEnumType, IntrospectionEnumValue, IntrospectionField, IntrospectionInputObjectType, IntrospectionInputType, IntrospectionInputTypeRef, IntrospectionInputValue, IntrospectionInterfaceType, IntrospectionListTypeRef, IntrospectionNamedTypeRef, IntrospectionNonNullTypeRef, IntrospectionObjectType, IntrospectionOptions, IntrospectionOutputType, IntrospectionOutputTypeRef, IntrospectionQuery, IntrospectionScalarType, IntrospectionSchema,
    IntrospectionType, IntrospectionTypeRef, IntrospectionUnionType, TypedQueryDocumentNode
} from 'graphql/utilities';

